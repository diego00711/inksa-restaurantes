// src/services/reviewServices.js
// =================================================================
// ARQUIVO CENTRAL DE SERVI√áOS DE AVALIA√á√ÉO
// Seus componentes React devem importar apenas deste arquivo.
// Ele organiza e distribui as fun√ß√µes de API para o resto da aplica√ß√£o.
// =================================================================

console.log('üöÄ M√≥dulo central de servi√ßos de avalia√ß√£o (reviewServices.js) est√° sendo carregado.');

// --- 1. IMPORTA√á√ïES DAS APIs REAIS ---
// Importa as fun√ß√µes de comunica√ß√£o com o backend dos seus arquivos de servi√ßo espec√≠ficos.
// Adapte os nomes dos arquivos se forem diferentes.
import { getRestaurantReviews, postRestaurantReview } from './restaurantReviewsService.js';
import { getClientReviews, postClientReview } from './clientReviewsService.js';
import { getDeliveryReviews, postDeliveryReview } from './deliveryReviewsService.js';
// Se tiver um para itens de menu, adicione aqui tamb√©m.
// import { getMenuItemReviews, postMenuItemReview } from './menuItemReviewsService.js';


// --- 2. EXPORTA√á√ÉO DOS SERVI√áOS ORGANIZADOS ---
// Agrupa as fun√ß√µes importadas em objetos de servi√ßo consistentes.
// √â isso que seus componentes React ir√£o consumir.

/**
 * Servi√ßo para gerenciar as avalia√ß√µes do RESTAURANTE.
 */
export const restaurantReviewService = {
  getRestaurantReviews: getRestaurantReviews,
  createReview: postRestaurantReview, // Usamos 'createReview' como um nome padr√£o para postagens
};

/**
 * Servi√ßo para gerenciar as avalia√ß√µes dos CLIENTES.
 */
export const clientReviewService = {
  getClientReviews: getClientReviews,
  createReview: postClientReview,
};

/**
 * Servi√ßo para gerenciar as avalia√ß√µes dos ENTREGADORES.
 */
export const deliveryReviewService = {
  getDeliveryReviews: getDeliveryReviews,
  createReview: postDeliveryReview,
};

/*
// Exemplo se voc√™ adicionar avalia√ß√µes de item de menu
export const menuItemReviewService = {
  getMenuItemReviews: getMenuItemReviews,
  createReview: postMenuItemReview,
};
*/


// --- 3. FUN√á√ïES UTILIT√ÅRIAS ---
// Fun√ß√µes auxiliares que podem ser usadas em qualquer lugar que lide com avalia√ß√µes.

export const reviewUtils = {
  /**
   * Formata uma string de data (preferencialmente ISO) para o padr√£o brasileiro (dd/mm/aaaa).
   * @param {string} dateString - A data em formato de string.
   * @returns {string} A data formatada ou uma mensagem de erro amig√°vel.
   */
  formatReviewDate(dateString) {
    if (!dateString) return 'Data indispon√≠vel';
    
    try {
      const date = new Date(dateString);
      // Verifica se a data √© v√°lida
      if (isNaN(date.getTime())) {
        return 'Data inv√°lida';
      }
      return date.toLocaleDateString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
      });
    } catch (error) {
      console.error("Erro ao formatar data:", dateString, error);
      return 'Data inv√°lida';
    }
  },
  
  /**
   * Valida os dados de uma nova avalia√ß√£o antes de enviar para a API.
   * @param {number} rating - A nota da avalia√ß√£o (1 a 5).
   * @param {string} orderId - O ID do pedido associado.
   * @returns {string[]} Um array de mensagens de erro. Retorna um array vazio se os dados forem v√°lidos.
   */
  validateReviewData(rating, orderId) {
    const errors = [];
    if (typeof rating !== 'number' || rating < 1 || rating > 5) {
      errors.push('A nota da avalia√ß√£o deve ser um n√∫mero entre 1 e 5.');
    }
    if (!orderId || typeof orderId !== 'string' || orderId.trim() === '') {
      errors.push('A refer√™ncia do pedido √© obrigat√≥ria para a avalia√ß√£o.');
    }
    return errors;
  }
};

console.log('‚úÖ M√≥dulo central de servi√ßos de avalia√ß√£o (reviewServices.js) carregado e pronto.');
